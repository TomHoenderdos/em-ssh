#!/usr/bin/env ruby
# This is really nothing more than a utility to test the em-ssh adapter.
# It's not meant to be used for anything else.
# It probably requires ruby 1.9.2-p180 as p190 tends to segfault when using Fibers.
require 'bundler/setup'
require 'termios'
require 'highline'
require 'em-ssh'
require 'em-ssh/shell'

include EM::Ssh::Log

def abort(msg)
  puts msg
  Process.exit
end # abort(msg)

options = {}
opts    = OptionParser.new
opts.banner += " [user:[password]@]host[:port] wait_string command [command command ...]"
options[:port] = 22
opts.on('-u', '--user String', String) { |u| options[:user] = u }
opts.on('-p', '--password [String]', String) do |p| 
  options[:password] = p.nil? ? HighLine.new.ask("password: "){|q| q.echo = "*" } : p
end
opts.on('-v', '--verbose') do 
  EM::Ssh.logger.level = EM::Ssh.logger.level - 1 unless EM::Ssh.logger.level == 0 
  options[:verbose] = EM::Ssh.logger.level
end
opts.parse!

host = ARGV.shift
if host.nil?
  host,options[:password] = options[:password], HighLine.new.ask("#{options[:password]}'s password: "){|q| q.echo = "*" }
end # host.nil?
abort("a host is required") if host.nil?

options[:user], host = *host.split('@') if host.include?('@')
options[:user], options[:password] = *options[:user].split(':') if options[:user].include?(':')
host, options[:port] = *host.split(':') if host.include?(':')


waitstr = ARGV.shift
commands = ARGV
abort("wait_string is required") if waitstr.nil?
abort("command is required") if commands.empty?


EM.run do
  Fiber.new {
    shell = EM::Ssh::Shell.new(host, options[:user], options[:password])
     commands.each do |command|
       mys = shell.split
       mys.on(:closed) { info("#{mys} has closed") }
     
       EM.next_tick do
         Fiber.new {
           debug("#{mys} waited for: '#{mys.wait_for(waitstr)}'")
           mys.line_terminator = "\n"
           debug("#{mys} send: #{command.inspect}")
           puts "#{mys} result: '#{mys.send_and_wait(command, waitstr)}'"
           mys.close        
         }.resume
       end # 
     end #  |command|
     
     shell.on(:childless) do
       info("#{shell}'s children all closed")
       shell.close
       EM.stop
     end # :childless
  }.resume  
end # EM.run
